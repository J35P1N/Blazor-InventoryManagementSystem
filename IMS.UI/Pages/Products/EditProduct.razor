@using IMS.Entities
@using IMS.UseCases.Products.Interfaces

@page "/editproduct/{ProductId:int}"
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavigationManager

<h3>Edit Product</h3>
<br />
<EditForm Model="product" OnValidSubmit="SaveProduct">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary> </ValidationSummary>
    <div class="form-group">
        <label for="name">Product Name</label>
        <InputText 
            id="name" 
            @bind-Value="product.ProductName"
            class="form-control"> 
        </InputText>
    </div>
    <div class="form-group"> 
        <label for="quantity">Quantity</label>
        <InputNumber 
            id="quantity" 
            @bind-Value="product.Quantity"
            class="form-control"> 
        </InputNumber>
    </div>
    <div class="form-group"> 
        <label for="price">Price</label>
        <InputNumber 
            id="price" 
            @bind-Value="product.Price"
            class="form-control"> 
        </InputNumber>
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public int ProductId {get; set;}

    private Product product {get; set;} = new Product();

    protected override async Task OnParametersSetAsync()
    {
        this.product = await ViewProductByIdUseCase.ExecuteAsync(ProductId);
    }

    private async Task SaveProduct()
    {
        await EditProductUseCase.ExecuteAsync(this.product);
        NavigationManager.NavigateTo("/products"); 
    }

    private void Cancel(){
        NavigationManager.NavigateTo("/products"); 
    }
} 